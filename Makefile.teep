#
# Copyright (c) 2020 SECOM CO., LTD. All Rights reserved.
#
# SPDX-License-Identifier: BSD-2-Clause
#

CC		= gcc
CFLAGS	= -Wall -g
LDFLAGS	= -lt_cose -lqcbor -lcrypto
INC		= -I ./inc -I ./examples/inc
TARGETu	= ./suit_for_teep_uri
TARGETi	= ./suit_for_teep_integrated
TARGETd	= ./suit_for_teep_depending
TARGETr	= ./suit_for_teep_delete
SRCu	= examples/suit_manifest_for_teep_uri.c
SRCi	= examples/suit_manifest_for_teep_integrated.c
SRCd	= examples/suit_manifest_for_teep_depend_uri.c
SRCr	= examples/suit_manifest_for_teep_delete.c
SRCS	= examples/suit_examples_common.c examples/suit_examples_cose.c src/suit_manifest_print.c src/suit_common.c src/suit_manifest_decode.c src/suit_manifest_encode.c src/suit_cose.c src/suit_digest.c
OBJDIR	= ./obj
OBJu	= $(addprefix $(OBJDIR)/,$(patsubst %.c,%.o,$(SRCu)))
OBJi	= $(addprefix $(OBJDIR)/,$(patsubst %.c,%.o,$(SRCi)))
OBJd	= $(addprefix $(OBJDIR)/,$(patsubst %.c,%.o,$(SRCd)))
OBJr	= $(addprefix $(OBJDIR)/,$(patsubst %.c,%.o,$(SRCr)))
OBJS	= $(addprefix $(OBJDIR)/,$(patsubst %.c,%.o,$(SRCS)))

ifdef debug
    CFLAGS += -DSKIP_ERROR
endif

.PHONY: all test generate clean

all: $(TARGETu) $(TARGETi) $(TARGETd) $(TARGETr) $(OUTPUTu) $(OUTPUTd) $(OUTPUTi) $(OUTPUTr)

$(TARGETu):	$(OBJu) $(OBJS)
	$(CC) -o $@ $^ $(LDFLAGS)

$(TARGETi):	$(OBJi) $(OBJS) $(TCOSE)
	$(CC) -o $@ $^ $(LDFLAGS) $(TCOSE)

$(TARGETd):	$(OBJd) $(OBJS) $(TCOSE)
	$(CC) -o $@ $^ $(LDFLAGS) $(TCOSE)

$(TARGETr):	$(OBJr) $(OBJS) $(TCOSE)
	$(CC) -o $@ $^ $(LDFLAGS) $(TCOSE)

$(OBJDIR)/%.o:	%.c
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INC) -o $@ -c $<

PRIV_KEY1	:= ./testfiles/key/trust_anchor_secp256r1.der
OUTPUTu		:= ./testfiles/suit_manifest_expU.cbor
OUTPUTi		:= ./testfiles/suit_manifest_expI.cbor
URI			:= https://tc.org/8d82573a-926d-4754-9353-32dc29997f74.suit
PRIV_KEY2	:= ../libteep/testfiles/key/tam_prime256v1.der
OUTPUTd		:= ./testfiles/suit_manifest_expD.cbor
DEPENDENCY	:= ./testfiles/suit_manifest_expU_fixed.cbor
OUTPUTr		:= ./testfiles/suit_manifest_expR.cbor

$(OUTPUTu): $(TARGETu) $(PRIV_KEY1)
	$(TARGETu) $(PRIV_KEY1) $(OUTPUTu)

$(OUTPUTd): $(TARGETd) $(OUTPUTu) $(PRIV_KEY2)
	$(TARGETd) -d $(OUTPUTu) -u $(URI) -p $(PRIV_KEY2) -o $(OUTPUTd)

$(OUTPUTi): $(TARGETi) $(PRIV_KEY1)
	$(TARGETi) $(PRIV_KEY1) $(OUTPUTi)

$(OUTPUTr): $(TARGETr) $(PRIV_KEY1)
	$(TARGETr) $(PRIV_KEY1) $(OUTPUTr)

generate: $(OUTPUTu) $(OUTPUTi) $(OUTPUTd) $(OUTPUTr)

test:
	$(TARGETu) $(PRIV_KEY1)
	$(TARGETi) $(PRIV_KEY1)
	$(TARGETd) $(OUTPUTu) $(PRIV_KEY2) -u $(URI)
	$(TARGETr) $(PRIV_KEY1)

clean:
	rm -f $(OBJS) $(TARGET1) $(TARGET2)

